<div class="bodyContainer">
	{{> leftNav}}

<script>
require([
	"dojo/dom-class",
	"dojo/on",
	"dojo/parser",
	"dijit/Dialog",
	"dojo/domReady!"
],
function(domClass, on, parser, Dialog) {
	getLogData(false);
	
	on(window, "resize", function() {
		var grid = dijit.byId("gridLogging");
		grid.resize();
	});
});

function getLogData(refresh) {
	require([
		"dojo/_base/lang",
		"dojo/dom",
		"dojo/dom-form",
		"dojo/dom-class", 
		"dojo/dom-construct",
		"dojo/dom-style",
		"dojo/topic",
		"dojo/request",
		"dojox/grid/EnhancedGrid",
		"dojox/grid/enhanced/plugins/Pagination",
		"dojo/data/ItemFileWriteStore",
		"scripts/utils/JSUtil",
		"scripts/widgets/TicketDialog",
		"scripts/constants/Constants",
		"scripts/constants/PubSubTopics",
		"dojo/domReady!"
	],
	function(lang, dom, domForm, domClass, domConstruct, domStyle, topic, request,
			 EnhancedGrid, GridPagination, ItemFileWriteStore,
			 JSUtil, TicketDialog, Constants, PubSubTopics) {
		var limit = domForm.fieldToObject("logLimit");
		var module = domForm.fieldToObject("logModule");
		var severity = domForm.fieldToObject("logSeverity");
		var searchText = domForm.fieldToObject("logSearchText");
			
		var gdata = {
			identifier: 'id',
			items: []
		}
		
		gdata.items.push({id: "12837,7TD,000", ticketId: "12837,7TD,000", dateOpened: "2015-04-02 02:16:18 GMT", title: "Client Version Information"});
		gdata.items.push({id: "00002,042,649", ticketId: "00002,042,649", dateOpened: "2014-04-11 12:17:00 GMT", title: "Unable to Find Path to Server"});
		
		var store = new ItemFileWriteStore({data: gdata});
		
		var layout = [[
			{'name': 'ID', 'field': 'ticketId', 'width': '20%', noresize: true},
			{'name': 'Date Opened', 'field': 'dateOpened', 'width': '20%', noresize: true},
			{'name': 'Title', 'field': 'title', 'width': '60%', noresize: true}
		]];
		
		var gridLogging = new dojox.grid.EnhancedGrid({
			id: 'gridLogging',
			store: store,
			structure: layout,
			rowSelector: '20px',
			autoHeight: true,
			plugins: {
				pagination: {
					defaultPageSize: 20,
					pageSizes: ["20", "50", "100"],
					description: true,
					sizeSwitch: true,
					pageStepper: true,
					gotoButton: true,
					/*page step to be displayed*/
					maxPageStep: 5,
					/*position of the pagination bar*/
					position: "top"
				}
			}
		}, document.createElement('div'));//paginatorBar
		
			gridLogging.on("RowClick", function(evt){
				var dialogHeight = Math.round((window.innerHeight * 0.85));
				var dialogWidth = Math.round((window.innerWidth * 0.8));
				console.log(dialogHeight);
				var divDialog = dojo.byId(tDialog.id);
				domStyle.set(divDialog, "height", dialogHeight + "px");
				domStyle.set(divDialog, "width", dialogWidth + "px");
				domStyle.set(divDialog, "overflow", "auto");
				domStyle.set(divDialog, "overflow-x", "hidden");
				domStyle.set(divDialog, "overflow-y", "auto");
				
				tDialog.show();
				var idx = evt.rowIndex,
					rowData = gridLogging.getItem(idx);
				
				var ticketContent = dom.byId("ticketContent");
				domConstruct.empty(ticketContent);
				
				var ticketDialog = new TicketDialog({docId: "12837,7TD,000", ticketId: "12837,7TD,000", ticketBody: "Show me something", dialogHeight: dialogHeight});
				ticketDialog.placeAt(ticketContent);
				ticketDialog.startup();
			
				tDialog.set('title', "12837,7TD,000" + " - " + "Client Version Information");
			}, true);
		
		dojo.byId("gridLoggingDiv").appendChild(gridLogging.domNode);
		
		gridLogging.startup();
	});
}

function downloadLogData() {
	require([
		"dojo/dom-form",
		"dojo/request",
		"dojo/topic",
		"scripts/constants/PubSubTopics"
	],
	function(domForm, request, topic, PubSubTopics) {
			var limit = domForm.fieldToObject("logLimit");
			var module = domForm.fieldToObject("logModule");
			var severity = domForm.fieldToObject("logSeverity");
			var searchText = domForm.fieldToObject("logSearchText");
			
			var url = "hub/api/logs/csv";
			var options = {
				method: "POST",
				handleAs: "text",
				data: {
					limit: limit,
					module: module,
					severity: severity,
					searchText: searchText
				},
			}
			
			var deferred = request(url, options);
				
			deferred.then(function(data){
				//console.log(data);
				topic.publish(PubSubTopics.LOGGING_FIRE_DOWNLOAD_LINK, data);
			}, function(error){
				console.log("logging: downloadLogData() - An unexpected error occurred: " + error);
			});
	});
}

require([
	"dojo/dom-construct",
	"dojo/topic",
	"scripts/constants/PubSubTopics"
],
function(domConstruct, topic, PubSubTopics) {
	topic.subscribe(PubSubTopics.LOGGING_FIRE_DOWNLOAD_LINK, function(data) {
		var divDownloadLogs = dojo.byId("downloadLogs");
		domConstruct.empty(divDownloadLogs);
		var blob = new Blob([data], { type: 'text/csv;charset=utf-8;' });
		var url = URL.createObjectURL(blob);     
		domConstruct.create("a", { id: "downloadLogsLink", href: url, download: "log.csv", innerHTML: "link", style: "visibility:hidden" }, divDownloadLogs);
		var downloadLink = dojo.byId("downloadLogsLink");
		downloadLink.click();
	});
});


require([
	"dojo/topic",
	"scripts/constants/PubSubTopics"
],
function(topic, PubSubTopics) {
	topic.subscribe(PubSubTopics.LOGGING_SAVE_LOG_DATA, function(data) {
		dataExport = data;
	});
});
</script>

	<div id="content" class="contentBase">
		<div class="tabs">
			<div class="tabSpacer"></div>
			<div class="tab"><div class="tabText">Module Logs</div></div>
			<div class="tabOn"><div class="tabTextOn">Tickets</div></div>
		</div>
		<div class="contentAreaLogging">
			<div id="logFiltersAttachPoint" class="logFilters">
				<form id="logFiltersForm" onkeydown="if (event.keyCode == 13) { getLogData(true); return false; }">
				<div class="logFiltersText">Last </div>
				<input id="logLimit" name="logLimit" class="logFiltersNumberField" type="text" value="20"/>
				<div class="logFiltersText"> product</div>
				<select id="logModule" name="logModule" class="logFiltersSelectField">
					<option value="all">All</option>
					<option value="00-hub">00 Hub</option>
					<option value="01-ticketreader">01 Ticket Reader</option>
					<option value="02-scorer">02 Scorer</option>
					<option value="03-messagemanager">03 Message Manager</option>
					<option value="04-dialogmanager">04 Dialog Manager</option>
					<option value="05-ticketwriter">05 Ticket Writer</option>
					<option value="06-analytics">06 Analytics</option>
					<option value="07-pipeline">07 Pipeline</option>
					<option value="08-collection">08 Collection</option>
					<option value="09-managementux">09 Management UX</option>
				</select>
				<div class="logFiltersText">text</div>
				<input id="logSearchText" name="logSearchText" class="logFiltersTextField" type="text" value=""/>
				<button class="logBtnRefresh" type="button" onclick="getLogData(true);"></button>
				<button class="logBtnDownload" type="button" onclick="downloadLogData();"></button>
				</form>
			</div>
			<div class="logArea">
				<div id="gridLoggingDiv" style="width:100%"></div>
			</div>
			<div id="downloadLogs"></div>
		</div>
	</div>
	
	<div data-dojo-type="dijit/Dialog" data-dojo-id="tDialog" title="" style="height: 600px; width: 800px;">
		<div id="ticketContent"></div>
	</div>
	
</div>