<div class="bodyContainer">
	{{> leftNav}}
	
<script>
var init = false;
	
require([
	"dojo/parser",
	"dojo/dom-class",
	"dojo/on",
	"dijit/ProgressBar",
	"dojo/domReady!"
],
function(parser, domClass, on, ProgressBar) {
	parser.parse();
	
	on(window, "resize", function() {
		var grid = dijit.byId("gridLogging");
		grid.resize();
	});
});

function getLogData(refresh) {
	require([
		"dojo/_base/lang",
		"dojo/dom",
		"dojo/dom-form",
		"dojo/dom-class", 
		"dojo/dom-construct",
		"dojo/topic",
		"dojo/request",
		"dojox/grid/EnhancedGrid",
		"dojox/grid/enhanced/plugins/Pagination",
		"dojo/data/ItemFileWriteStore",
		"scripts/utils/JSUtil",
		"scripts/constants/Constants",
		"scripts/constants/PubSubTopics",
		"dojo/domReady!"
	],
	function(lang, dom, domForm, domClass, domConstruct, topic, request, EnhancedGrid,
			 GridPagination, ItemFileWriteStore, JSUtil, Constants, PubSubTopics) {
		var ticketId = domForm.fieldToObject("logTicketId");
		
		if (ticketId != "") {
			if (!init) {
				dom.byId("gridLoggingDiv").innerHTML = "";
				init = true;
				
				var url = "hub/api/logsbyticket/" + ticketId;
				var options = {
					method: "GET",
					handleAs: "json",
				}
				
				showProgressBar();
				var deferred = request(url, options);
				deferred.then(function(data){
					var gdata = {
						identifier: 'id',
						items: []
					}
					
					var count = 1;
					data.rows.forEach(function(row) {
						var timestamp = row.doc.timestamp;
						var hostname = "";
						if (row.doc.hostname) {
							hostname = row.doc.hostname;
						}
						var emittedBy = row.doc.emittedBy;
						if (emittedBy.indexOf("com.ibm.watson.firstresponse.") >= 0) {
							emittedBy = emittedBy.replace("com.ibm.watson.firstresponse.","");
						}
						var additionalInfo = null;
						if (row.doc.additionalInformation) {
							if (typeof row.doc.additionalInformation == "string") {
								additionalInfo = row.doc.additionalInformation
							} else if (typeof row.doc.additionalInformation == "object") {
								additionalInfo = JSON.stringify(row.doc.additionalInformation, null, "  ");
							}
						}
						
						gdata.items.push(dojo.mixin({id: count},
													{timestamp: timestamp},
													{messageId: row.doc.messageId},
													{severity: row.doc.severity},
													{hostname: hostname},
													{emittedBy: emittedBy},
													{message: row.doc.message},
													{additionalInfo: additionalInfo}
													));
						count++;
					});
					
					var store = new ItemFileWriteStore({data: gdata});
					
					var layout = [[
						{'name': 'Timestamp (UTC)', 'field': 'timestamp', 'width': '15%', noresize: true},
						{'name': 'Severity', 'field': 'severity', 'width': '6%', noresize: true},
						{'name': 'Hostname', 'field': 'hostname', 'width': '8%', noresize: true},
						{'name': 'Emitted By', 'field': 'emittedBy', 'width': '10%', noresize: true},
						{'name': 'Message ID', 'field': 'messageId', 'width': '14%', noresize: true},
						{'name': 'Message', 'field': 'message', 'width': '22%', noresize: true},
						{'name': 'Additional Info', 'field': 'additionalInfo', 'width': '25%', noresize: true,
							formatter: function(info){
								if (info) return info;
								else return "";
							}
						}
					]];
					
					var gridLogging = new dojox.grid.EnhancedGrid({
						id: 'gridLogging',
						store: store,
						structure: layout,
						rowSelector: '20px',
						autoHeight: true,
						selectable: true,
						sortInfo: -1,
						plugins: {
							pagination: {
								defaultPageSize: 20,
								pageSizes: ["20", "50", "100", "500", "1000"],
								description: true,
								sizeSwitch: true,
								pageStepper: true,
								gotoButton: true,
								/*page step to be displayed*/
								maxPageStep: 5,
								/*position of the pagination bar*/
								position: "top"
							}
						}
					}, document.createElement('div'));//paginatorBar
						
					dom.byId("gridLoggingDiv").appendChild(gridLogging.domNode);
					
					gridLogging.startup();
					
					hideProgressBar();
				}, function(error){
					console.log("logging: getLogData() - An unexpected error occurred: " + error);
					hideProgressBar();
				});
			} else {
				var url = "hub/api/logsbyticket/" + ticketId;
				var options = {
					method: "GET",
					handleAs: "json",
				}
				
				showProgressBar();
				var deferred = request(url, options);
				deferred.then(function(data){
					var gdata = {
						identifier: 'id',
						items: []
					}
					
					var count = 1;
					data.rows.forEach(function(row) {
						var timestamp = row.doc.timestamp;
						var emittedBy = row.doc.emittedBy;
						var hostname = "";
						if (row.doc.hostname) {
							hostname = row.doc.hostname;
						}
						if (emittedBy.indexOf("com.ibm.watson.firstresponse.") >= 0) {
							emittedBy = emittedBy.replace("com.ibm.watson.firstresponse.","");
						}
						var additionalInfo = null;
						if (row.doc.additionalInformation) {
							if (typeof row.doc.additionalInformation == "string") {
								additionalInfo = row.doc.additionalInformation
							} else if (typeof row.doc.additionalInformation == "object") {
								additionalInfo = JSON.stringify(row.doc.additionalInformation, null, "  ");
							}
						}
						
						gdata.items.push(dojo.mixin({id: count},
													{timestamp: timestamp},
													{messageId: row.doc.messageId},
													{severity: row.doc.severity},
													{hostname: hostname},
													{emittedBy: emittedBy},
													{message: row.doc.message},
													{additionalInfo: additionalInfo}
													));
						count++;
					});
					
					var newStore = new ItemFileWriteStore({data: gdata});
					var grid = dijit.byId("gridLogging");
					grid.setStore(newStore);
					
					hideProgressBar();
				}, function(error){
					console.log("logging: getLogData() - An unexpected error occurred: " + error);
					hideProgressBar();
				});
			}
		}
	});
}

function downloadLogData() {
	require([
		"dojo/dom-form",
		"dojo/request",
		"dojo/topic",
		"scripts/constants/PubSubTopics"
	],
	function(domForm, request, topic, PubSubTopics) {
			var limit = domForm.fieldToObject("logLimit");
			var module = domForm.fieldToObject("logModule");
			var severity = domForm.fieldToObject("logSeverity");
			var searchText = domForm.fieldToObject("logSearchText");
			
			var url = "hub/api/logs/csv";
			var options = {
				method: "POST",
				handleAs: "text",
				data: {
					limit: limit,
					module: module,
					severity: severity,
					searchText: searchText
				},
			}
			
			var deferred = request(url, options);
				
			deferred.then(function(data){
				//console.log(data);
				topic.publish(PubSubTopics.LOGGING_FIRE_DOWNLOAD_LINK, data);
			}, function(error){
				console.log("logging: downloadLogData() - An unexpected error occurred: " + error);
			});
	});
}

function showProgressBar() {
	require([
		"dojo/dom",
		"dojo/dom-class",
		"dojo/dom-style"
	],
	function(dom, domClass, domStyle) {
		var progressBar = dom.byId("refreshProgress");
		var gridDiv = dom.byId("gridLoggingDiv");
		var btnRefresh = dom.byId("btnRefresh");
		domClass.remove(progressBar, "hidden");
		domStyle.set(gridDiv, "opacity", "0.5");
		btnRefresh.removeAttribute("onclick");
		domClass.remove(btnRefresh, "logBtnRefresh");
		domClass.add(btnRefresh, "logBtnRefreshDisabled");
	});
}

function hideProgressBar() {
	require([
		"dojo/dom",
		"dojo/dom-class",
		"dojo/dom-style"
	],
	function(dom, domClass, domStyle) {
		var progressBar = dom.byId("refreshProgress");
		var gridDiv = dom.byId("gridLoggingDiv");
		var btnRefresh = dom.byId("btnRefresh");
		domClass.add(progressBar, "hidden");
		domStyle.set(gridDiv, "opacity", "1.0");
		btnRefresh.setAttribute("onclick", "getLogData(true)");
		domClass.remove(btnRefresh, "logBtnRefreshDisabled");
		domClass.add(btnRefresh, "logBtnRefresh");
	});
}

require([
	"dojo/dom",
	"dojo/dom-construct",
	"dojo/topic",
	"scripts/constants/PubSubTopics"
],
function(dom, domConstruct, topic, PubSubTopics) {
	topic.subscribe(PubSubTopics.LOGGING_FIRE_DOWNLOAD_LINK, function(data) {
		var divDownloadLogs = dom.byId("downloadLogs");
		domConstruct.empty(divDownloadLogs);
		var blob = new Blob([data], { type: 'text/csv;charset=utf-8;' });
		var url = URL.createObjectURL(blob);     
		domConstruct.create("a", { id: "downloadLogsLink", href: url, download: "log.csv", innerHTML: "link", style: "visibility:hidden" }, divDownloadLogs);
		var downloadLink = dom.byId("downloadLogsLink");
		downloadLink.click();
	});
});

require([
	"dojo/topic",
	"scripts/constants/PubSubTopics"
],
function(topic, PubSubTopics) {
	topic.subscribe(PubSubTopics.LOGGING_SAVE_LOG_DATA, function(data) {
		dataExport = data;
	});
});

function showView(view) {
	window.location = view;
}
</script>

	<div id="content" class="contentBase">
		<div class="tabs">
			<div class="tabSpacer"></div>
			<div class="tab" onclick="showView('logging');"><div class="tabText">DQS Module Logs</div></div>
			<div class="tabOn"><div class="tabTextOn">DQS Logs By Ticket</div></div>
			<div class="tab" onclick="showView('orchestratorLog');"><div class="tabText">Orchestrator Logs</div></div>
		</div>
		<div class="contentAreaLogging">
			<div id="logFiltersAttachPoint" class="logFilters">
				<form id="logFiltersForm" onkeydown="if (event.keyCode == 13) { getLogData(true); return false; }">
				<div class="logFiltersText">Ticket ID</div>
				<input id="logTicketId" name="logTicketId" class="logFiltersTextFieldId" type="text" value=""/>
                <!--<div class="logFiltersText">Last</div>
                <input id="logLimit" name="logLimit" class="logFiltersNumberField" type="text" value="100"/>-->
				<button id="btnRefresh" class="logBtnRefresh" type="button" onclick="getLogData(true);"></button>
				<div id="refreshProgress" class="progressIndicator hidden"></div>
				<!--<button class="logBtnDownload" type="button" onclick="downloadLogData();"></button>-->
				</form>
			</div>
			<div class="logArea">
				<div id="gridLoggingDiv" style="width:100%;"><div class="logDefaultText">Specify a ticket ID</div></div>
			</div>
			<div id="downloadLogs"></div>
		</div>
	</div>
	
</div>