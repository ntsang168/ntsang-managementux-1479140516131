<style type="text/css">
	@import "scripts/widgets/css/TicketDialog.css";
</style>

<div class="bodyContainer">
	{{> leftNav}}
	
<script>
require([
	"dojo/parser",
	"dojo/dom-class",
	"dojo/on",
	"dijit/ProgressBar",
	"dijit/Calendar",
	"dijit/Dialog",
	"dojo/domReady!"
],
function(parser, domClass, on, ProgressBar) {
	var reportDataExport = null;
	
	renderReport(false);
	
	parser.parse();
	
	on(window, "resize", function() {
		var grid = dijit.byId("gridReport");
		grid.resize();
	});
});

function showReportList() {
	window.location = "analytics";
}

function renderReport(refresh) {
	require([
		"dojo/dom",
		"dojo/dom-style",
		"dojo/dom-form",
		"dojo/dom-construct",
		"dojo/topic",
		"dojo/request",
		"dojo/DeferredList",
		"dojox/grid/EnhancedGrid",
		"dojox/grid/enhanced/plugins/Pagination",
		"dojo/data/ItemFileWriteStore",
		"dojox/charting/Chart",
		"dojox/charting/themes/Adobebricks",
		"dojox/charting/plot2d/Bars",
		"dojox/charting/plot2d/Columns",
		"dojox/charting/action2d/Highlight",
		"dojox/charting/action2d/Tooltip",
		"dojox/charting/plot2d/Markers",
		"dojox/charting/axis2d/Default",
		"dojox/charting/widget/Legend",
		"scripts/utils/JSUtil",
		"scripts/widgets/TicketDialog",
		"scripts/constants/PubSubTopics",
		"scripts/constants/Constants",
	],
	function (dom, domStyle, domForm, domConstruct, topic, request,
			  DeferredList, EnhancedGrid, GridPagination, ItemFileWriteStore,
			  Chart, theme, Bars, Columns, Highlight, Tooltip, Markers, Default, Legend,
			  JSUtil, TicketDialog, PubSubTopics, Constants) {
		
		var limit = domForm.fieldToObject("limit");
		var startDate = domForm.fieldToObject("startDate");
		var endDate = domForm.fieldToObject("endDate");
		var type = domForm.fieldToObject("type");
		var componentIds = domForm.fieldToObject("componentIds");
		var url = "hub/api/analytics/ticketsprocesseddetails";
		var options = {
			method: "POST",
			handleAs: "json",
			data: {
				limit: limit,
				start: startDate,
				end: endDate,
				type: type,
				componentids: componentIds,
				details: true,
				answers: true,
				customerdetails: true
			}
		}
		
		hideAllCalendars();
		showProgressBar();
		var deferred = request(url, options);
		deferred.then(function(results) {
			var gdata = {
				identifier: 'id',
				items: null
			}
			
			var ticketsProcessed = [];
			var reportDataExport = [];
			var count = 0;
			results.tickets.forEach(function(row) {
				//console.log(row);
				ticketsProcessed.push({
					id: count,
					ticket_id: row.ticket_id,
					pmr_number: row.pmr_number,
					timestamp: row.timestamp,
					tx_id: row.tx_id,
					log_id: row.log_id,
					component_id: row.component_id,
					component_desc: row.component_desc,
					machine_type: row.machine_type,
					product_name: row.product_name,
					division: row.division,
					title: row.title,
					description: row.description,
					customer_email: row.customer_email,
					company_name: row.company_name,
					country: row.country,
					pmr_type: row.pmr_type,
					build: row.build
				});
				reportDataExport.push({
					ticket_id: row.ticket_id,
					pmr_number: row.pmr_number,
					timestamp: row.timestamp,
					tx_id: row.tx_id,
					log_id: row.log_id,
					component_id: row.component_id,
					component_desc: row.component_desc,
					machine_type: row.machine_type,
					product_name: row.product_name,
					division: row.division,
					title: row.title,
					description: row.description,
					customer_email: row.customer_email,
					company_name: row.company_name,
					country: row.country,
					pmr_type: row.pmr_type,
					build: row.build,
					answers: row.answers
				});
				count++;
			});
			gdata.items = ticketsProcessed;
			
			topic.publish(PubSubTopics.ANALYTICS_SAVE_TICKETS_UPDATED_REPORT_DATA, reportDataExport);
			
			if (!refresh) {
				var store = new ItemFileWriteStore({data: gdata});
					
				var layout = [[
					{'name': 'PMR', 'field': 'pmr_number', 'width': '10%', noresize: true},
					{'name': 'Timestamp', 'field': 'timestamp', 'width': '12%', noresize: true},
					{'name': 'Customer', 'field': 'customer_email', 'width': '12%', noresize: true},
					{'name': 'Comp ID', 'fields': ['component_id', 'machine_type', 'component_desc'], 'width': '15%', noresize: true,
						formatter: function(value) {
							if (value[0]) return value[0] + "<br/>" + value[2];
							else if (value[1]) return value[1] + "<br/>" + value[2];
							else return "";
						}
					},
					{'name': 'Country', 'field': 'country', 'width': '6%', noresize: true},
					{'name': 'Title', 'field': 'title', 'width': '15%', noresize: true},
					{'name': 'Description', 'field': 'description', 'width': '30%', noresize: true},
				]];
					
				var grid = new dojox.grid.EnhancedGrid({
					id: 'gridReport',
					store: store,
					structure: layout,
					rowSelector: '20px',
					autoHeight: true,
					selectable: true,
					sortInfo: -2,
					plugins: {
						pagination: {
							defaultPageSize: 20,
							pageSizes: ["20", "50", "100", "500", "1000"],
							description: true,
							sizeSwitch: true,
							pageStepper: true,
							gotoButton: true,
							/*page step to be displayed*/
							maxPageStep: 5,
							/*position of the pagination bar*/
							position: "top"
						}
					}
				}, document.createElement('div'));
				
				grid.on("RowClick", function(evt){
					/*var divDialog = dom.byId(myDialog.id);
					var dialogHeight = Math.round((window.innerHeight * 0.85));
					var dialogWidth = Math.round((window.innerWidth * 0.85));
					domStyle.set(divDialog, "height", dialogHeight.toString() + "px");
					domStyle.set(divDialog, "width", dialogWidth.toString() + "px");
		
					myDialog.set('title', "");
					myDialog.show();
					var idx = evt.rowIndex,
						rowData = grid.getItem(idx);
					
					var ticketContent = dom.byId("ticketContent");
					domConstruct.empty(ticketContent);
					
					//var progressDialog = new ProgressDialog({dialogHeight: dialogHeight});
					//progressDialog.placeAt(ticketContent);
					
					domConstruct.empty(ticketContent);
					var ticketDialog = new TicketDialog({
						dialogHeight: dialogHeight,
						dialogWidth: dialogWidth,
						docId: rowData.ticket_id[0],
						ticketId: rowData.pmr_number[0],
						txId: "",
						ticketBody: rowData.description[0],
						timestamp: rowData.timestamp[0],
						componentId: rowData.component_id[0],
						componentDesc: rowData.component_desc[0],
						country: rowData.country[0],
						companyName: rowData.company_name[0],
						customerEmail: rowData.customer_email[0]
					});
					ticketDialog.placeAt(ticketContent);
					
					myDialog.set('title', rowData.pmr_number[0] + " - " + rowData.title[0]);*/
					
					var idx = evt.rowIndex,
						rowData = grid.getItem(idx);
					var pmrNumber = rowData.pmr_number[0];
					
					var divWebRetainLink = dom.byId("webRetainLink");
					domConstruct.empty(divWebRetainLink);
					var url = "http://longspeakz.boulder.ibm.com/WebRetain/DispatcherServlet?oper=pmrDisplay&pmrnumber=" + pmrNumber.substring(0,5) + "&branch=" + pmrNumber.substring(6,9) + "&country=" + pmrNumber.substring(10,13) + "&library=PMR&type=Software";
					domConstruct.create("a", { id: "retainLink", href: url, target: "_blank", innerHTML: "link", style: "visibility:hidden" }, divWebRetainLink);
					var retainLink = dom.byId("retainLink");
					retainLink.click();
				}, true);
				
				dom.byId("gridReportDiv").appendChild(grid.domNode);
					
				grid.startup();
				hideProgressBar();
			} else {
				var newStore = new ItemFileWriteStore({data: gdata});
				var grid = dijit.byId("gridReport");
				grid.setStore(newStore);
				hideProgressBar();
			}

				
		}, function(err){
			hideProgressBar();
			console.log("ticketsProcessed: renderReport() - An unexpected error occurred: " + err);
		});
	});
}

function downloadReport() {
	require([
		"dojo/dom",
		"dojo/dom-construct",
		"scripts/utils/JSUtil"
	],
	function(dom, domConstruct, JSUtil) {
		//var csvData = JSUtil.JSONToCSVConvertor(reportDataExport, true);
		//console.log(csvData);
		
		var divDownloadReportLink = dom.byId("downloadReportLink");
		domConstruct.empty(divDownloadReportLink);
		var blob = new Blob([JSON.stringify(reportDataExport, null, "    ")], { type: 'text/csv;charset=utf-8;' });
		var url = URL.createObjectURL(blob);     
		domConstruct.create("a", { id: "downloadLink", href: url, download: "export.json", innerHTML: "link", style: "visibility:hidden" }, divDownloadReportLink);
		var downloadLink = dom.byId("downloadLink");
		downloadLink.click();
	});
}


require([
	"dojo/topic",
	"scripts/constants/PubSubTopics"
],
function(topic, PubSubTopics) {
	topic.subscribe(PubSubTopics.ANALYTICS_SAVE_TICKETS_UPDATED_REPORT_DATA, function(dataExport) {
		reportDataExport = {export: dataExport};
	});
});

function showProgressBar() {
	require([
		"dojo/dom",
		"dojo/dom-class",
		"dojo/dom-style"
	],
	function(dom, domClass, domStyle) {
		var progressBar = dom.byId("refreshProgress");
		var btnRefresh = dom.byId("btnRefresh");
		var gridDiv = dom.byId("gridReportDiv");
		domClass.remove(progressBar, "hidden");
		domStyle.set(gridDiv, "opacity", "0.5");
		btnRefresh.removeAttribute("onclick");
		domClass.remove(btnRefresh, "logBtnRefresh");
		domClass.add(btnRefresh, "logBtnRefreshDisabled");
	});
}

function hideProgressBar() {
	require([
		"dojo/dom",
		"dojo/dom-class",
		"dojo/dom-style"
	],
	function(dom, domClass, domStyle) {
		var progressBar = dom.byId("refreshProgress");
		var gridDiv = dom.byId("gridReportDiv");
		var btnRefresh = dom.byId("btnRefresh");
		domClass.add(progressBar, "hidden");
		domStyle.set(gridDiv, "opacity", "1.0");
		btnRefresh.setAttribute("onclick", "renderReport(true)");
		domClass.remove(btnRefresh, "logBtnRefreshDisabled");
		domClass.add(btnRefresh, "logBtnRefresh");
	});
}

function showCalendar(calendar) {
	require([
		"dojo/dom",
		"dojo/dom-class"
	],
	function(dom, domClass) {
		var calendarDiv = dom.byId(calendar);
		domClass.remove(calendarDiv, "hidden");
		domClass.add(calendarDiv, "datePickerContainer");
	});
}

function hideCalendar(calendar) {
	require([
		"dojo/dom",
		"dojo/dom-class"
	],
	function(dom, domClass) {
		var calendarDiv = dom.byId(calendar);
		domClass.remove(calendarDiv, "datePickerContainer");
		domClass.add(calendarDiv, "hidden");
	});
}

function hideAllCalendars() {
	require([
		"dojo/dom",
		"dojo/dom-class"
	],
	function(dom, domClass) {
		var calendarStartDateDiv = dom.byId("startDateCalendar");
		domClass.remove(calendarStartDateDiv, "datePickerContainer");
		domClass.add(calendarStartDateDiv, "hidden");
		
		var calendarEndDateDiv = dom.byId("endDateCalendar");
		domClass.remove(calendarEndDateDiv, "datePickerContainer");
		domClass.add(calendarEndDateDiv, "hidden");
	});
}
</script>
		
	<div id="content" class="contentBase">
		<div class="tabs">
			<div class="tabSpacer"></div>
			<div id="tabSelectReportAttachPoint" class="tab" onclick="showReportList();"><div id="tabSelectReportTextAttachPoint" class="tabText">Select Report</div></div>
			<div id="tabDividerAttachPoint" class="tabDivider"></div>
			<div id="tabReportAttachPoint" class="tabOn"><div id="tabReportNameAttachPoint" class="tabTextStatic">Wizard of Oz</div></div>
		</div>
		<div id="viewReportListAttachPoint" class="contentArea">
			<div id="reportFiltersAttachPoint" class="filters">
				<form id="filtersForm" onkeydown="if (event.keyCode == 13) { renderReport(true); return false; }">
				<div class="logFiltersText">Last </div>
				<input id="limit" name="limit" class="filtersNumberField" type="text" value="100"/>
				<div class="logFiltersText">-OR-</div>
				<div class="logFiltersSpacer"></div>
				<div class="logFiltersText">Start Date</div>
				<div class="dateFieldContainer">
					<input id="startDate" name="startDate" class="formDateField" type="text" onclick="showCalendar('startDateCalendar');" onchange="hideCalendar('startDateCalendar');" />
					<div id="startDateCalendar" class="hidden" data-dojo-type="dijit/Calendar" data-dojo-props="dayWidth:'abbr'">
						<script type="dojo/method" data-dojo-event="onChange" data-dojo-args="value">
							require(["dojo/dom"], function(dom){
								var newDate = new Date(value);
								var newDateStr = newDate.toISOString();
								newDateStr = newDateStr.replace(newDateStr.substring(newDateStr.indexOf("T")), "T00:00:00.000Z");
								dom.byId('startDate').value = newDateStr;
								hideCalendar("startDateCalendar");
							});
						</script>
					</div>
				</div>
				<div class="logFiltersText">End Date</div>
				<div class="dateFieldContainer">
					<input id="endDate" name="endDate" class="formDateField" type="text" onfocus="showCalendar('endDateCalendar');" onchange="hideCalendar('endDateCalendar');"/>
					<div id="endDateCalendar" class="hidden" data-dojo-type="dijit/Calendar" data-dojo-props="dayWidth:'abbr'">
						<script type="dojo/method" data-dojo-event="onChange" data-dojo-args="value">
							require(["dojo/dom"], function(dom){
								var newDate = new Date(value);
								var newDateStr = newDate.toISOString();
								newDateStr = newDateStr.replace(newDateStr.substring(newDateStr.indexOf("T")), "T00:00:00.000Z");
								dom.byId('endDate').value = newDateStr;
								hideCalendar("endDateCalendar");
							});
						</script>
					</div>
				</div>
				<button id="btnRefresh" class="logBtnRefresh" type="button" onclick="renderReport(true);"></button>
				<!--<div id="progressBar" dojoType="dijit.ProgressBar" indeterminate="true" class="logProgressBar hidden"></div>-->
				<div id="refreshProgress" class="progressIndicator hidden"></div>
				<!--<div class="filtersText">Show</div>
				<select id="showBatches" name="showBatches" class="filtersSelectField" onchange="refreshReportData();">
					<option value="all">All</option>
					<option value="inprogress" selected>In Progress</option>
					<option value="completed">Completed</option>
				</select>-->
				<button class="btnDownload" type="button" onclick="downloadReport();"></button>
				</form>
			</div>
			<div class="filters">
				<div class="filtersText">Type</div>
				<select id="type" name="type" class="filtersSelectField" style="width: 120px">
					<option value="sw">Software</option>
					<option value="hw">Hardware</option>
					<option value="all">All</option>
				</select>
				<div class="logFiltersText">Comp IDs / Machine Types</div>
				<input id="componentIds" name="componentIds" class="formTextField" type="text" value=""/>
			</div>
			<div class="gridArea">
				<div id="gridReportDiv" style="width:100%;"></div>
			</div>
			<div id="downloadReportLink"></div>
		</div>
	</div>
	<div data-dojo-type="dijit/Dialog" data-dojo-id="myDialog" title="">
		<div id="ticketContent"></div>
	</div>
	<div id="webRetainLink"></div>
</div>
